{"ast":null,"code":"var _jsxFileName = \"/Users/brentrohner/Projects/SmartWebsiteBlocker/frontend/src/components/Routes.tsx\";\nimport React from 'react';\nimport { Switch } from 'react-router-dom';\n\n/**\n * For a given type of Href, get the search params\n * as an object e.g. ?id=123 gives { id: '123' }\n */\nconst getUrlSearchParams = props => {\n  const search = props.location.search;\n  const urlSearchParams = new URLSearchParams(search);\n  const params = {};\n\n  for (const [key, value] of urlSearchParams) {\n    params[key] = value;\n  }\n\n  return params;\n};\n/**\n * For a given type of Href, this provides type-safe conversion\n * of url parameters to page component props.\n */\n\n\nconst render = Component => props => {\n  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props.match.params, getUrlSearchParams(props), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }));\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Defines all client-side routes within the app.\n */\n\n\nexport default function Routes() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/brentrohner/Projects/SmartWebsiteBlocker/frontend/src/components/Routes.tsx"],"names":["React","Switch","getUrlSearchParams","props","search","location","urlSearchParams","URLSearchParams","params","key","value","render","Component","match","Routes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAgBC,MAAhB,QAAmD,kBAAnD;;AAUA;;;;AAIA,MAAMC,kBAAkB,GACtBC,KADyB,IAEQ;AACjC,QAAMC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAeD,MAA9B;AACA,QAAME,eAAe,GAAG,IAAIC,eAAJ,CAAoBH,MAApB,CAAxB;AACA,QAAMI,MAA8B,GAAG,EAAvC;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BJ,eAA3B,EAA4C;AAC1CE,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;AAYA;;;;;;AAIA,MAAMG,MAAM,GACVC,SADa,IAETT,KAAD,IAA+D;AAClE,sBAAO,oBAAC,SAAD,oBAAeA,KAAK,CAACU,KAAN,CAAYL,MAA3B,EAAuCN,kBAAkB,CAACC,KAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAJD;AAKA;;AAEA;;;;;AAGA,eAAe,SAASW,MAAT,GAA+B;AAC5C,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React from 'react';\nimport { Route, Switch, RouteComponentProps } from 'react-router-dom';\nimport hrefs, { Href } from 'src/modules/href';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype HrefProps<H extends Href<any>> = H extends () => string\n  ? {} // A parameterless href yields an empty props object\n  : H extends (params: infer Params) => string\n  ? Params // An href with parameters yields those parameters as props\n  : never;\n\n/**\n * For a given type of Href, get the search params\n * as an object e.g. ?id=123 gives { id: '123' }\n */\nconst getUrlSearchParams = <H extends Href<any>>(\n  props: RouteComponentProps<HrefProps<H>>\n): Record<HrefProps<H>, string> => {\n  const search = props.location.search;\n  const urlSearchParams = new URLSearchParams(search);\n  const params: Record<string, string> = {};\n  for (const [key, value] of urlSearchParams) {\n    params[key] = value;\n  }\n  return params;\n};\n\n/**\n * For a given type of Href, this provides type-safe conversion\n * of url parameters to page component props.\n */\nconst render = <H extends Href<any>>(\n  Component: React.ComponentType<HrefProps<H>>\n) => (props: RouteComponentProps<HrefProps<H>>): React.ReactNode => {\n  return <Component {...props.match.params} {...getUrlSearchParams(props)} />;\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Defines all client-side routes within the app.\n */\nexport default function Routes(): JSX.Element {\n  return (\n    <>\n      <Switch></Switch>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}