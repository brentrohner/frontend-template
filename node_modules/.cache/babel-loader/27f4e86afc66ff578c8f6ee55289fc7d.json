{"ast":null,"code":"import { combineReducers } from 'redux';\nconst reducers = {};\n/** Reducer of all actions for the root state. */\n\nconst rootReducer = combineReducers(reducers);\n/** Helper to extract the actions that a reducer be applied to. */\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/brentrohner/Projects/SmartWebsiteBlocker/frontend/src/redux/reducers/index.ts"],"names":["combineReducers","reducers","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAyC,OAAzC;AAEA,MAAMC,QAAQ,GAAG,EAAjB;AAEA;;AACA,MAAMC,WAAW,GAAGF,eAAe,CAAkBC,QAAlB,CAAnC;AAEA;;AASA,eAAeC,WAAf","sourcesContent":["import { combineReducers, Reducer } from 'redux';\n\nconst reducers = {};\n\n/** Reducer of all actions for the root state. */\nconst rootReducer = combineReducers<typeof reducers>(reducers);\n\n/** Helper to extract the actions that a reducer be applied to. */\ntype ExtractReducerActions<R> = R extends Reducer<infer S, infer X> ? X : never;\n\n/** Union of all actions that can be reduced by the root reducer. */\nexport type AllActions = ExtractReducerActions<typeof rootReducer>;\n\n/** Types the combined state of the redux store. */\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}